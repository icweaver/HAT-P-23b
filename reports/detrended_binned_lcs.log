Traceback (most recent call last):
  File "/usr/share/miniconda/envs/hatp23b/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/hatp23b/lib/python3.9/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/hatp23b/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/hatp23b/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/hatp23b/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/hatp23b/lib/python3.9/site-packages/nbclient/client.py", line 540, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/hatp23b/lib/python3.9/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/share/miniconda/envs/hatp23b/lib/python3.9/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
data_dir = "data/detrended_binned_lcs"
dirpaths = sorted(glob.glob(f"{data_dir}/hp*"))
dirpath_dict = {
    f"Transit {i}": dirpath for (i, dirpath) in enumerate(dirpaths, start=1)
}

for title, GPT_dir in dirpath_dict.items():
    wbin_paths = sorted(glob.glob(f"{GPT_dir}/wavelength/wbin*"), key=utils.wbin_num)
    PCA_list = []
    for wbin_path in wbin_paths:
        PCA_paths = glob.glob(f"{wbin_path}/PCA*")
        PCAs = [path.split("/")[-1] for path in PCA_paths]
        PCA_list.append(PCAs)

    common_PCAs = set(PCA_list[0])
    for s in PCA_list[1:]:
        common_PCAs.intersection_update(s)

    PCA_max = max(common_PCAs, key=lambda s: int(s.split("_")[-1]))
    PCA_num = int(PCA_max.split("_")[-1])
    # print(f"max common PCA = {PCA_num}")

    # Getting t0 from WLC data
    fpath = f"{GPT_dir}/white-light/results.dat"
    t0 = float(utils.get_result(fpath, key="t0", unc=False))
    P = float(utils.get_result(fpath, key="P", unc=False))

    # Get wavelength bins
    fpath = f"{GPT_dir}/transpec.csv"
    wbins = np.loadtxt(fpath, skiprows=1, usecols=[0, 1], delimiter=",")

    # Glob doesn't automatically sort, but instead follows the local filesystem"s
    # rules, which can be very system dependent.
    # To avoid potential cross-platform issues, I just sort based on an explicit
    # rule that is passed to `sorted`. In this case, the rule is:
    # sort based on the <num> part in wbin<num> of each file path.
    dirpath = f"{GPT_dir}/wavelength"
    detrended_files = f"{dirpath}/wbin*/PCA_{PCA_num}/detrended_lc.dat"
    fpaths = sorted(glob.glob(detrended_files), key=utils.wbin_num)

    # Store final data in <# of wavelength bins> x <length of timeseries> arrays
    detfluxes, models, resids = [], [], []
    for fpath in fpaths:
        time, detflux, detfluxerr, model = np.loadtxt(fpath, unpack=True)
        detfluxes.append(detflux)
        models.append(model)
        resids.append(detflux - model + 1)
    detfluxes = np.array(detfluxes).T
    models = np.array(models).T
    resids = np.array(resids).T
    phase = utils.get_phases(time, P, t0)
    time_rel = phase

    ###################################
    # Plot detrended flux and residuals
    ###################################
    # Plot configs
    N = detfluxes.shape[1]  # Number of wavelength bins
    colors = np.array(sns.color_palette("Spectral_r", N))

    offset = 0.01  # Spacing betweem binned lcs
    # Optional bins to highlight
    species = {
        "Na I-D": 5892.9,
        # "HÎ±":6564.6,
        "K I": 7682.0,
        "Na I-8200": 8189.0,
    }
    scatter_plot_kwargs = {
        "marker": ".",
        "lw": 0,
        "mew": 0,  # Make non-zero to show marker outlines
    }
    annotate_kwargs = {
        "fontsize": 8,
        "horizontalalignment": "right",
        "path_effects": [PathEffects.withStroke(linewidth=2, foreground="k")],
    }
    annotate_rms_kwargs = {
        "fontsize": 8,
        "horizontalalignment": "left",
        "path_effects": [PathEffects.withStroke(linewidth=2, foreground="k")],
    }

    fig, axes = plt.subplots(1, 2, figsize=(FIG_LARGE), sharex=True, sharey=True)
    ax_left, ax_right = axes.flatten()

    # Detrended flux
    ax_left.set_title("Detrended flux")
    p_det = utils.plot_binned(
        ax_left,
        time_rel,
        detfluxes,
        wbins,
        offset,
        colors,
        plot_kwargs=scatter_plot_kwargs,
        models=models,
    )

    # Residual flux
    ax_right.set_title("Residuals")
    baselines = np.ones_like(resids)
    p_res = utils.plot_binned(
        ax_right,
        time_rel,
        resids,
        wbins,
        offset,
        colors,
        plot_kwargs=scatter_plot_kwargs,
        models=baselines,
        annotate=True,
        annotate_kwargs=annotate_kwargs,
        annotate_rms_kwargs=annotate_rms_kwargs,
        species=species,
    )

    # Save
    ax_left.set_ylabel("Normalized flux + offset")
    fig.text(0.52, 0, "Phase", ha="left")
    ax_left.set_xlim(-0.075, 0.075)
    fig.tight_layout()
    fig.set_size_inches(FIG_LARGE)
    title = "detrended_binned_lcs_" + title.lower().replace(" ", "_")
    #utils.savefig(f"../paper/figures/detrended_binned_lcs/{title}.pdf")
    utils.savefig(f"/home/mango/Desktop/detrended_binned_lcs/{title}.png", dpi=250)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
[0;32m/usr/share/miniconda/envs/hatp23b/lib/python3.9/pathlib.py[0m in [0;36mmkdir[0;34m(self, mode, parents, exist_ok)[0m
[1;32m   1311[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1312[0;31m             [0mself[0m[0;34m.[0m[0m_accessor[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mmode[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1313[0m         [0;32mexcept[0m [0mFileNotFoundError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: '/home/mango/Desktop/detrended_binned_lcs'

During handling of the above exception, another exception occurred:

[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
[0;32m/usr/share/miniconda/envs/hatp23b/lib/python3.9/pathlib.py[0m in [0;36mmkdir[0;34m(self, mode, parents, exist_ok)[0m
[1;32m   1311[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1312[0;31m             [0mself[0m[0;34m.[0m[0m_accessor[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mmode[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1313[0m         [0;32mexcept[0m [0mFileNotFoundError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: '/home/mango/Desktop'

During handling of the above exception, another exception occurred:

[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-3-4ab88d69d989>[0m in [0;36m<module>[0;34m[0m
[1;32m    125[0m     [0mtitle[0m [0;34m=[0m [0;34m"detrended_binned_lcs_"[0m [0;34m+[0m [0mtitle[0m[0;34m.[0m[0mlower[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mreplace[0m[0;34m([0m[0;34m" "[0m[0;34m,[0m [0;34m"_"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    126[0m     [0;31m#utils.savefig(f"../paper/figures/detrended_binned_lcs/{title}.pdf")[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 127[0;31m     [0mutils[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34mf"/home/mango/Desktop/detrended_binned_lcs/{title}.png"[0m[0;34m,[0m [0mdpi[0m[0;34m=[0m[0;36m250[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/work/HAT-P-23b/HAT-P-23b/notebooks/utils.py[0m in [0;36msavefig[0;34m(fpath, **kwargs)[0m
[1;32m   1052[0m [0;34m[0m[0m
[1;32m   1053[0m [0;32mdef[0m [0msavefig[0m[0;34m([0m[0mfpath[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1054[0;31m     [0mpathlib[0m[0;34m.[0m[0mPath[0m[0;34m([0m[0mfpath[0m[0;34m)[0m[0;34m.[0m[0mparents[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mparents[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0mexist_ok[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1055[0m     [0mplt[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0mfpath[0m[0;34m,[0m [0mbbox_inches[0m[0;34m=[0m[0;34m"tight"[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1056[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/hatp23b/lib/python3.9/pathlib.py[0m in [0;36mmkdir[0;34m(self, mode, parents, exist_ok)[0m
[1;32m   1314[0m             [0;32mif[0m [0;32mnot[0m [0mparents[0m [0;32mor[0m [0mself[0m[0;34m.[0m[0mparent[0m [0;34m==[0m [0mself[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1315[0m                 [0;32mraise[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1316[0;31m             [0mself[0m[0;34m.[0m[0mparent[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mparents[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0mexist_ok[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1317[0m             [0mself[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mmode[0m[0;34m,[0m [0mparents[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m [0mexist_ok[0m[0;34m=[0m[0mexist_ok[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1318[0m         [0;32mexcept[0m [0mOSError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/hatp23b/lib/python3.9/pathlib.py[0m in [0;36mmkdir[0;34m(self, mode, parents, exist_ok)[0m
[1;32m   1314[0m             [0;32mif[0m [0;32mnot[0m [0mparents[0m [0;32mor[0m [0mself[0m[0;34m.[0m[0mparent[0m [0;34m==[0m [0mself[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1315[0m                 [0;32mraise[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1316[0;31m             [0mself[0m[0;34m.[0m[0mparent[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mparents[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0mexist_ok[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1317[0m             [0mself[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mmode[0m[0;34m,[0m [0mparents[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m [0mexist_ok[0m[0;34m=[0m[0mexist_ok[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1318[0m         [0;32mexcept[0m [0mOSError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/hatp23b/lib/python3.9/pathlib.py[0m in [0;36mmkdir[0;34m(self, mode, parents, exist_ok)[0m
[1;32m   1310[0m         """
[1;32m   1311[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1312[0;31m             [0mself[0m[0;34m.[0m[0m_accessor[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mmode[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1313[0m         [0;32mexcept[0m [0mFileNotFoundError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1314[0m             [0;32mif[0m [0;32mnot[0m [0mparents[0m [0;32mor[0m [0mself[0m[0;34m.[0m[0mparent[0m [0;34m==[0m [0mself[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '/home/mango'
PermissionError: [Errno 13] Permission denied: '/home/mango'

